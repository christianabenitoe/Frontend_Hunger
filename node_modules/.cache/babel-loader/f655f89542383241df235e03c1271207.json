{"ast":null,"code":"import axios from \"axios\";\nvar baseURL; // if (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === \"PRODUCTION\") {\n//     baseURL = process.env.REACT_APP_API_BASE_URL;\n// } else {\n//    baseURL = \"http://127.0.0.1:8000\";\n// }\n// baseURL = 'https://backend-prince.herokuapp.com/';\n\nbaseURL = \"http://127.0.0.1:8000\";\nconst api = axios.create({\n  baseURL: baseURL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport default class API {\n  constructor() {\n    this.getPosts = async () => {\n      const posts = await api.get(\"/posts/\").then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return posts;\n    };\n\n    this.addPost = async (name, body, image) => {\n      const formData = new FormData();\n      formData.append(\"name\", name);\n      formData.append(\"body\", body);\n      formData.append(\"image\", image);\n      const savedPost = await api.post(\"/posts/add/\", formData).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return savedPost;\n    };\n\n    this.deletePost = async id => {\n      const response = await api.delete(\"/posts/delete/\" + id + \"/\").then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return response;\n    };\n\n    this.getItems = async category => {\n      let url = \"/items\";\n\n      if (category) {\n        url += \"?category=\" + category;\n      }\n\n      const items = await api.get(url).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return items;\n    };\n\n    this.getReviews = async item_id => {\n      let url = \"/reviews?item_id=\" + item_id;\n      const reviews = await api.get(url).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return reviews;\n    };\n\n    this.writeReview = async (item_id, name, body, like_count) => {\n      const formData = new FormData();\n      formData.append(\"item\", item_id);\n      formData.append(\"name\", name);\n      formData.append(\"body\", body);\n      formData.append(\"like_count\", like_count);\n      const savedReview = await api.post(\"/reviews/add\", formData).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return savedReview;\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/musubimanagement/Downloads/hunger-captain-main 2/frontend/src/API.js"],"names":["axios","baseURL","api","create","headers","API","getPosts","posts","get","then","response","data","catch","error","Error","addPost","name","body","image","formData","FormData","append","savedPost","post","deletePost","id","delete","getItems","category","url","items","getReviews","item_id","reviews","writeReview","like_count","savedReview"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nvar baseURL;\n// if (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === \"PRODUCTION\") {\n//     baseURL = process.env.REACT_APP_API_BASE_URL;\n// } else {\n//    baseURL = \"http://127.0.0.1:8000\";\n// }\n\n// baseURL = 'https://backend-prince.herokuapp.com/';\nbaseURL = \"http://127.0.0.1:8000\";\nconst api = axios.create({\n  baseURL: baseURL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\nexport default class API {\n    ////////////////////////////////\n    // Post : sample\n    ////////////////////////////////\n    getPosts = async () => {\n        const posts = await api\n            .get(\"/posts/\")\n            .then((response) => {\n                return response.data\n            })\n            .catch((error) => {\n                throw new Error(error)\n            })\n        return posts\n    }\n    addPost = async (name, body, image) => {\n        const formData = new FormData();\n        formData.append(\"name\", name);\n        formData.append(\"body\", body);\n        formData.append(\"image\", image);\n        const savedPost = await api\n            .post(\"/posts/add/\", formData)\n            .then((response) => {\n                return response.data\n            })\n            .catch((error) => {\n                throw new Error(error)\n            })\n        return savedPost\n    }\n    deletePost = async (id) => {\n        const response = await api\n            .delete(\"/posts/delete/\" + id + \"/\")\n            .then((response) => {\n                return response.data\n            })\n            .catch((error) => {\n                throw new Error(error)\n            })\n        return response\n    }\n    ////////////////////////////////\n    // Item\n    ////////////////////////////////\n    getItems = async (category) => {\n        let url = \"/items\";\n        if (category) {\n            url += \"?category=\" + category;\n        }\n        const items = await api\n            .get(url)\n            .then((response) => {\n                return response.data\n            })\n            .catch((error) => {\n                throw new Error(error)\n            })\n        return items\n    }\n    ////////////////////////////////\n    // Review\n    ////////////////////////////////\n    getReviews = async (item_id) => {\n        let url = \"/reviews?item_id=\" + item_id;\n        const reviews = await api\n            .get(url)\n            .then((response) => {\n                return response.data\n            })\n            .catch((error) => {\n                throw new Error(error)\n            })\n        return reviews\n    }\n    writeReview = async (item_id, name, body, like_count) => {\n        const formData = new FormData();\n        formData.append(\"item\", item_id);\n        formData.append(\"name\", name);\n        formData.append(\"body\", body);\n        formData.append(\"like_count\", like_count);\n        const savedReview = await api\n            .post(\"/reviews/add\", formData)\n            .then((response) => {\n                return response.data\n            })\n            .catch((error) => {\n                throw new Error(error)\n            })\n        return savedReview\n \n    }\n}"]},"metadata":{},"sourceType":"module"}